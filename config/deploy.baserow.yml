service: realty-data
image: <%= ENV['KAMAL_REGISTRY_USERNAME'] %>/realty-baserow

# Baserow needs more than the default 30s to boot.
deploy_timeout: 120

# Keep connections alive longer for WebSockets
drain_timeout: 300

servers:
  web:
    - <%= ENV['SERVER_IP'] %>

proxy:
  ssl: true
  forward_headers: true
  host: data.slavaestates.com
  healthcheck:
    path: /_health
    interval: 10
    timeout: 5
  # Disable response buffering for WebSocket connections
  buffering:
    responses: false

registry:
  username: <%= ENV['KAMAL_REGISTRY_USERNAME'] %>
  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  dockerfile: baserow.Dockerfile
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= File.read('.ruby-version').strip %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    BASEROW_PUBLIC_URL: https://data.slavaestates.com
    BASEROW_TRIGGER_SYNC_TEMPLATES_AFTER_MIGRATION: false
    DOWNLOAD_FILE_VIA_XHR: 1
    AWS_S3_CUSTOM_DOMAIN: "hel1.your-objectstorage.com/realty-media"
  secret:
    - AWS_ACCESS_KEY_ID:S3_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY:S3_SECRET_ACCESS_KEY
    - AWS_STORAGE_BUCKET_NAME:S3_MEDIA_BUCKET
    - AWS_S3_ENDPOINT_URL:S3_ENDPOINT

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  shell: app exec --interactive --reuse "bash"
  backup: app exec --reuse "sh -c '/baserow.sh backend-cmd-with-db backup -f /baserow/data/backups/baserow_backup.tar.gz'"
  restore: app exec --reuse "sh -c '/baserow.sh backend-cmd-with-db restore -f /baserow/data/backups/baserow_backup.tar.gz -- --clean --if-exists'"
  reset-db-index: app exec --reuse "sh -c '/baserow.sh backend-cmd-with-db manage sqlsequencereset core database | grep -E \"^(BEGIN;|SELECT|COMMIT;)\" | /baserow.sh backend-cmd-with-db manage dbshell'"

# Use a persistent storage volume.
volumes:
  - "baserow_data:/baserow/data"
